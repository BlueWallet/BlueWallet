name: Build & Release Mac Catalyst App

on:
  push:
    branches:
      - master
    paths:
      - 'ios/**'
      - 'src/**'
      - 'package.json'
      - '.github/workflows/build-catalyst-release.yml'
  pull_request:
    types: [opened, reopened, synchronize, labeled]
    branches:
      - master
    paths:
      - 'ios/**'
      - 'src/**'
      - 'package.json'
    labels:
      - 'catalyst'
  workflow_dispatch:
    inputs:
      version_increment:
        description: 'Increment version (patch, minor, major)'
        required: false
        default: 'none'

jobs:
  build-catalyst:
    runs-on: macos-latest
    timeout-minutes: 120
    env:
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
      MATCH_READONLY: "true"

    outputs:
      new_build_number: ${{ steps.generate_build_number.outputs.build_number }}
      project_version: ${{ steps.determine_marketing_version.outputs.project_version }}
      catalyst_output_path: ${{ steps.build_catalyst_app.outputs.catalyst_output_path }}
      latest_commit_message: ${{ steps.get_latest_commit_details.outputs.commit_message }}
      branch_name: ${{ steps.get_latest_commit_details.outputs.branch_name }}
      
    steps:
      - name: Checkout Project
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensures the full Git history is available
      
      # Setup caching to speed up builds
      - name: Setup Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/Caches/CocoaPods
            ios/Pods
            ~/.npm
            node_modules
            vendor/bundle
          key: ${{ runner.os }}-catalyst-${{ hashFiles('**/package-lock.json', '**/Podfile.lock', '**/Gemfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-catalyst-

      - name: Get Latest Commit Details
        id: get_latest_commit_details
        run: |
          # Check if we are in a detached HEAD state
          if [ "$(git rev-parse --abbrev-ref HEAD)" == "HEAD" ]; then
            CURRENT_BRANCH=$(git show-ref --head -s HEAD | xargs -I {} git branch --contains {} | grep -v "detached" | head -n 1 | sed 's/^[* ]*//')
          else
            CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
          fi
          
          LATEST_COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          
          echo "CURRENT_BRANCH=${CURRENT_BRANCH}" >> $GITHUB_ENV
          echo "LATEST_COMMIT_MESSAGE=${LATEST_COMMIT_MESSAGE}" >> $GITHUB_ENV
          echo "branch_name=${CURRENT_BRANCH}" >> $GITHUB_OUTPUT
          echo "commit_message=${LATEST_COMMIT_MESSAGE}" >> $GITHUB_OUTPUT

      - name: Print Commit Details
        run: |
          echo "Commit Message: ${{ env.LATEST_COMMIT_MESSAGE }}"
          echo "Branch Name: ${{ env.CURRENT_BRANCH }}"

      - name: Specify Node.js Version
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest

      - name: Set Up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.6
          bundler-cache: true

      - name: Install Dependencies with Bundler
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3 --quiet

      - name: Install Node Modules
        run: npm install --omit=dev --yes

      - name: Install CocoaPods Dependencies
        run: |
          bundle exec fastlane ios install_pods
          echo "CocoaPods dependencies installed successfully"

      - name: Generate Build Number Based on Timestamp
        id: generate_build_number
        run: |
          NEW_BUILD_NUMBER=$(date +%s)
          echo "NEW_BUILD_NUMBER=$NEW_BUILD_NUMBER" >> $GITHUB_ENV
          echo "build_number=$NEW_BUILD_NUMBER" >> $GITHUB_OUTPUT

      - name: Set Build Number
        run: bundle exec fastlane ios increment_build_number_lane

      - name: Determine Marketing Version
        id: determine_marketing_version
        run: |
          MARKETING_VERSION=$(grep MARKETING_VERSION BlueWallet.xcodeproj/project.pbxproj | awk -F '= ' '{print $2}' | tr -d ' ;' | head -1)
          echo "PROJECT_VERSION=$MARKETING_VERSION" >> $GITHUB_ENV
          echo "project_version=$MARKETING_VERSION" >> $GITHUB_OUTPUT
        working-directory: ios

      - name: Set Up Git Authentication
        env:
          ACCESS_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
        run: |
          git config --global credential.helper 'cache --timeout=3600'
          git config --global http.https://github.com/.extraheader "AUTHORIZATION: basic $(echo -n x-access-token:${ACCESS_TOKEN} | base64)"

      - name: Create Temporary Keychain
        run: bundle exec fastlane ios create_temp_keychain
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Setup Catalyst Provisioning Profiles
        run: bundle exec fastlane ios fetch_appstore_profiles_catalyst
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          GIT_ACCESS_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
          GIT_URL: ${{ secrets.GIT_URL }}
          ITC_TEAM_ID: ${{ secrets.ITC_TEAM_ID }}
          ITC_TEAM_NAME: ${{ secrets.ITC_TEAM_NAME }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Build Catalyst App
        id: build_catalyst_app
        run: bundle exec fastlane ios build_catalyst_app
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          GIT_ACCESS_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
          GIT_URL: ${{ secrets.GIT_URL }}
          ITC_TEAM_ID: ${{ secrets.ITC_TEAM_ID }}
          ITC_TEAM_NAME: ${{ secrets.ITC_TEAM_NAME }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Upload Catalyst App as Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: BlueWallet_Catalyst
          path: ${{ env.CATALYST_OUTPUT_PATH }}
          retention-days: 7

      - name: Delete Temporary Keychain
        if: always()
        run: bundle exec fastlane ios delete_temp_keychain

  testflight-upload:
    needs: build-catalyst
    runs-on: macos-latest
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'testflight')
    env:
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APP_SPECIFIC_PASSWORD: ${{ secrets.APP_SPECIFIC_PASSWORD }}
      NEW_BUILD_NUMBER: ${{ needs.build-catalyst.outputs.new_build_number }}
      PROJECT_VERSION: ${{ needs.build-catalyst.outputs.project_version }}
      LATEST_COMMIT_MESSAGE: ${{ needs.build-catalyst.outputs.latest_commit_message }}
      BRANCH_NAME: ${{ needs.build-catalyst.outputs.branch_name }}
      
    steps:
      - name: Checkout Project
        uses: actions/checkout@v4

      - name: Set Up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.6
          bundler-cache: true

      - name: Install Dependencies with Bundler
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3 --quiet

      - name: Download Catalyst App from Artifact
        uses: actions/download-artifact@v4
        with:
          name: BlueWallet_Catalyst
          path: ./catalyst/

      - name: Find Catalyst App Path
        run: |
          CATALYST_APP_PATH=$(find ./catalyst -name "*.zip" | head -n 1)
          if [ -z "$CATALYST_APP_PATH" ]; then
            echo "Error: No Catalyst app zip found in downloaded artifact"
            exit 1
          fi
          echo "CATALYST_OUTPUT_PATH=$CATALYST_APP_PATH" >> $GITHUB_ENV
          echo "Found Catalyst app at: $CATALYST_APP_PATH"

      - name: Create App Store Connect API Key JSON
        run: echo '${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}' > ./appstore_api_key.json

      - name: Notarize and Upload Catalyst App
        run: |
          # Setup API key for authentication
          bundle exec fastlane setup_app_store_connect_api_key
          
          # Notarize the app
          bundle exec fastlane ios notarize_catalyst_app
          
          # Upload to TestFlight
          bundle exec fastlane ios upload_catalyst_to_testflight
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          GIT_ACCESS_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
          GIT_URL: ${{ secrets.GIT_URL }}
          ITC_TEAM_ID: ${{ secrets.ITC_TEAM_ID }}
          ITC_TEAM_NAME: ${{ secrets.ITC_TEAM_NAME }}
          APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}
          APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Post PR Comment
        if: success() && github.event_name == 'pull_request'
        uses: actions/github-script@v6
        env:
          BUILD_NUMBER: ${{ needs.build-catalyst.outputs.new_build_number }}
          PROJECT_VERSION: ${{ needs.build-catalyst.outputs.project_version }}
        with:
          script: |
            const buildNumber = process.env.BUILD_NUMBER;
            const version = process.env.PROJECT_VERSION;
            const message = `âœ… Mac Catalyst Build ${version} (${buildNumber}) has been uploaded to TestFlight and will be available for testing soon.`;
            const prNumber = context.payload.pull_request.number;
            const repo = context.repo;
            github.rest.issues.createComment({
              ...repo,
              issue_number: prNumber,
              body: message,
            });
