name: Build and Deploy (iOS & Catalyst)

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, reopened, synchronize, labeled]
    branches:
      - master
  workflow_dispatch:

jobs:
  common_setup:
    runs-on: macos-latest
    outputs:
      new_build_number: ${{ steps.generate_build_number.outputs.build_number }}
      project_version: ${{ steps.determine_marketing_version.outputs.project_version }}
      latest_commit_message: ${{ steps.get_latest_commit_message.outputs.commit_message }}
    steps:
      - name: Checkout project
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Set up Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 15.4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.6
          bundler-cache: true

      - name: Install dependencies with Bundler
        run: bundle install
        working-directory: ./ios

      - name: Install node_modules
        run: npm install

      - name: Generate Build Number based on timestamp
        id: generate_build_number
        run: |
          NEW_BUILD_NUMBER=$(date +%s)
          echo "NEW_BUILD_NUMBER=$NEW_BUILD_NUMBER" >> $GITHUB_ENV
          echo "::set-output name=build_number::$NEW_BUILD_NUMBER"

      - name: Determine Marketing Version
        id: determine_marketing_version
        run: |
          MARKETING_VERSION=$(grep MARKETING_VERSION ios/BlueWallet.xcodeproj/project.pbxproj | awk -F '= ' '{print $2}' | tr -d ' ;' | head -1)
          echo "PROJECT_VERSION=$MARKETING_VERSION" >> $GITHUB_ENV
          echo "::set-output name=project_version::$MARKETING_VERSION"

      - name: Get Latest Commit Message
        id: get_latest_commit_message
        run: |
          LATEST_COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          echo "LATEST_COMMIT_MESSAGE=${LATEST_COMMIT_MESSAGE}" >> $GITHUB_ENV
          echo "::set-output name=commit_message::$LATEST_COMMIT_MESSAGE"

      - name: Cache Provisioning Profiles and Certificates
        id: cache_provisioning
        uses: actions/cache@v3
        with:
          path: |
            ~/Library/MobileDevice/Provisioning\ Profiles/
            ~/Library/Keychains/
          key: macOS-provisioning-profiles-${{ hashFiles('**/profiles.tar.gz', '**/certs.tar.gz') }}

      - name: Setup Provisioning Profiles and Certificates
        if: steps.cache_provisioning.outputs.cache-hit != 'true'
        run: bundle exec fastlane ios setup_profiles
        working-directory: ./ios
        env:
          GIT_URL: ${{ secrets.GIT_URL }}

  build_ios:
    runs-on: macos-latest
    needs: common_setup
    env:
      NEW_BUILD_NUMBER: ${{ needs.common_setup.outputs.new_build_number }}
      PROJECT_VERSION: ${{ needs.common_setup.outputs.project_version }}
      LATEST_COMMIT_MESSAGE: ${{ needs.common_setup.outputs.latest_commit_message }}
    steps:
      - name: Checkout project
        uses: actions/checkout@v4

      - name: Install CocoaPods Dependencies
        run: |
          gem install cocoapods
          bundle exec pod install
        working-directory: ./ios

      - name: Build iOS App
        run: bundle exec fastlane ios build_bluewallet_ios_app
        working-directory: ./ios

      - name: Upload iOS to TestFlight
        run: bundle exec fastlane ios upload_ios_to_testflight
        working-directory: ./ios

  build_catalyst:
    runs-on: macos-latest
    needs: common_setup
    env:
      NEW_BUILD_NUMBER: ${{ needs.common_setup.outputs.new_build_number }}
      PROJECT_VERSION: ${{ needs.common_setup.outputs.project_version }}
      LATEST_COMMIT_MESSAGE: ${{ needs.common_setup.outputs.latest_commit_message }}
    steps:
      - name: Checkout project
        uses: actions/checkout@v4

      - name: Install CocoaPods Dependencies
        run: |
          gem install cocoapods
          bundle exec pod install
        working-directory: ./ios

      - name: Build Mac Catalyst App
        run: bundle exec fastlane ios build_catalyst_app
        working-directory: ./ios

      - name: Check for 'Upload to TestFlight' Label
        id: check_label
        uses: actions/github-script@v6
        with:
          script: |
            const labels = context.payload.pull_request ? context.payload.pull_request.labels : [];
            return labels.some(label => label.name === 'Upload to TestFlight');

      - name: Upload Mac Catalyst to TestFlight
        if: steps.check_label.outputs.result == 'true'
        run: bundle exec fastlane ios upload_catalyst_to_testflight
        working-directory: ./ios

      - name: Save Mac Catalyst App as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: BlueWallet-MacCatalyst
          path: |
            ./ios/build-catalyst/*.app

  finalize:
    runs-on: macos-latest
    needs: [build_ios, build_catalyst]
    steps:
      - name: Save IPA as Artifact
        uses: actions/upload-artifact@v3
        with:
          name: BlueWallet-iOS
          path: |
            ./ios/build/*.ipa
