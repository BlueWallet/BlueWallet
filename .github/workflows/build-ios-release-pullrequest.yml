name: Build Release and Upload to TestFlight (iOS)

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, reopened, synchronize, labeled]
    branches:
      - master
  workflow_dispatch:

jobs:
  set-build-env:
    runs-on: macos-latest
    outputs:
      new_build_number: ${{ steps.generate_build_number.outputs.build_number }}
      project_version: ${{ steps.determine_marketing_version.outputs.project_version }}
      latest_commit_message: ${{ steps.get_latest_commit_message.outputs.commit_message }}
    steps:
      - name: Checkout project
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.6
          bundler-cache: true

      - name: Specify node version
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'

      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 15.4

      - name: Cache node_modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Cache CocoaPods
        uses: actions/cache@v3
        with:
          path: Pods
          key: pods-${{ runner.os }}-${{ hashFiles('Podfile.lock') }}
          restore-keys: |
            pods-${{ runner.os }}-

      - name: Cache Provisioning Profiles
        uses: actions/cache@v3
        with:
          path: ~/Library/MobileDevice/Provisioning Profiles
          key: ${{ runner.os }}-provisioning-profiles-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-provisioning-profiles-

      - name: Install dependencies with Bundler
        run: |
          bundle config path vendor/bundle
          bundle install --jobs=4 --retry=3 --quiet

      - name: Install node_modules
        run: npm install --production

      - name: Install CocoaPods Dependencies
        run: bundle exec fastlane ios install_pods

      - name: Generate Build Number based on timestamp
        id: generate_build_number
        run: |
          NEW_BUILD_NUMBER=$(date +%s)
          echo "NEW_BUILD_NUMBER=$NEW_BUILD_NUMBER" >> $GITHUB_ENV

      - name: Determine Marketing Version
        id: determine_marketing_version
        run: |
          MARKETING_VERSION=$(grep MARKETING_VERSION ios/BlueWallet.xcodeproj/project.pbxproj | awk -F '= ' '{print $2}' | tr -d ' ;' | head -1)
          echo "PROJECT_VERSION=$MARKETING_VERSION" >> $GITHUB_ENV

      - name: Get Latest Commit Message
        id: get_latest_commit_message
        run: |
          LATEST_COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          echo "LATEST_COMMIT_MESSAGE=${LATEST_COMMIT_MESSAGE}" >> $GITHUB_ENV

  build:
    runs-on: macos-latest
    needs: set-build-env
    env:
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      GIT_ACCESS_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
      GIT_URL: ${{ secrets.GIT_URL }}
    steps:
      - name: Checkout project
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.6
          bundler-cache: true

      - name: Restore Provisioning Profiles Cache
        uses: actions/cache@v3
        with:
          path: ~/Library/MobileDevice/Provisioning Profiles
          key: ${{ runner.os }}-provisioning-profiles-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-provisioning-profiles-

      - name: Build App
        run: bundle exec fastlane ios build_app_lane

      - name: Upload IPA as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: BlueWallet.${{ needs.set-build-env.outputs.project_version }}(${{ needs.set-build-env.outputs.new_build_number }}).ipa
          path: ./ios/build/*.ipa
  
  testflight-upload:
    needs: build
    runs-on: macos-latest
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'testflight')
    env:
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      GIT_ACCESS_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
      GIT_URL: ${{ secrets.GIT_URL }}
      ITC_TEAM_ID: ${{ secrets.ITC_TEAM_ID }}
      ITC_TEAM_NAME: ${{ secrets.ITC_TEAM_NAME }}
      APPLE_ID: ${{ secrets.APPLE_ID }}
      APP_STORE_CONNECT_API_KEY_PATH: $(pwd)/ios/appstore_api_key.json
      APP_STORE_CONNECT_API_KEY_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}
      APP_STORE_CONNECT_API_KEY_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
    steps:
      - name: Restore Provisioning Profiles Cache
        uses: actions/cache@v3
        with:
          path: ~/Library/MobileDevice/Provisioning Profiles
          key: ${{ runner.os }}-provisioning-profiles-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-provisioning-profiles-

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.6
          bundler-cache: true

      - name: Download IPA from Artifact
        uses: actions/download-artifact@v3
        with:
          name: BlueWallet.${{ needs.build.outputs.project_version }}(${{ needs.build.outputs.new_build_number }}).ipa
          path: ./ios/build

      - name: Create App Store Connect API Key JSON
        run: echo '${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}' > ./ios/appstore_api_key.json

      - name: Upload to TestFlight
        run: bundle exec fastlane ios upload_to_testflight_lane

      - name: Post PR Comment
        if: success() && github.event_name == 'pull_request'
        uses: actions/github-script@v6
        env:
          BUILD_NUMBER: ${{ needs.build.outputs.new_build_number }}
          LATEST_COMMIT_MESSAGE: ${{ needs.build.outputs.latest_commit_message }}
        with:
          script: |
            const buildNumber = process.env.BUILD_NUMBER;
            const message = `The build ${buildNumber} has been uploaded to TestFlight.`;
            const prNumber = context.payload.pull_request.number;
            const repo = context.repo;
            github.rest.issues.createComment({
              ...repo,
              issue_number: prNumber,
              body: message,
            });

  build-ios-simulator-release:
    runs-on: macos-latest
    needs: set-build-env
    env:
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      GIT_ACCESS_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
      GIT_URL: ${{ secrets.GIT_URL }}
      
    steps:
    - name: Checkout project
      uses: actions/checkout@v4

    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.1.6
        bundler-cache: true

    - name: Restore Provisioning Profiles Cache
      uses: actions/cache@v3
      with:
        path: ~/Library/MobileDevice/Provisioning Profiles
        key: ${{ runner.os }}-provisioning-profiles-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-provisioning-profiles-

    - name: Build iOS Simulator Release App
      run: bundle exec fastlane ios build_ios_simulator_release

    - name: Zip iOS Simulator Release Build
      run: bundle exec fastlane ios zip_ios_simulator_release_build

    - name: Upload iOS Simulator Release Build as Artifact
      uses: actions/upload-artifact@v4
      with:
        name: BlueWallet-Simulator.${{ needs.set-build-env.outputs.project_version }}(${{ needs.set-build-env.outputs.new_build_number }}).zip
        path: ./build/simulator/BlueWallet-Simulator.${{ needs.set-build-env.outputs.project_version }}(${{ needs.set-build-env.outputs.new_build_number }}).zip

  browserstack-upload:
    runs-on: macos-latest
    needs: build-ios-simulator-release
    env:
      BROWSERSTACK_USERNAME: ${{ secrets.BROWSERSTACK_USERNAME }}
      BROWSERSTACK_ACCESS_KEY: ${{ secrets.BROWSERSTACK_ACCESS_KEY }}
      NEW_BUILD_NUMBER: ${{ needs.set-build-env.outputs.new_build_number }}
      PROJECT_VERSION: ${{ needs.set-build-env.outputs.project_version }}
      LATEST_COMMIT_MESSAGE: ${{ needs.set-build-env.outputs.latest_commit_message }}
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
      GIT_ACCESS_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
      GIT_URL: ${{ secrets.GIT_URL }}
    steps:
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: 3.1.6
        bundler-cache: true

    - name: Download Simulator Build Artifact
      uses: actions/download-artifact@v3
      with:
        name: BlueWallet-Simulator.${{ needs.set-build-env.outputs.project_version }}(${{ needs.set-build-env.outputs.new_build_number }}).zip
        path: ./build/simulator

    - name: Upload iOS Simulator Release Build to BrowserStack
      run: bundle exec fastlane ios upload_ios_simulator_release_to_browserstack

    - name: Post PR Comment
      if: success() && github.event_name == 'pull_request'
      uses: actions/github-script@v6
      env:
        BUILD_NUMBER: ${{ needs.set-build-env.outputs.new_build_number }}
        LATEST_COMMIT_MESSAGE: ${{ needs.set-build-env.outputs.latest_commit_message }}
      with:
        script: |
          const buildNumber = process.env.BUILD_NUMBER;
          const message = `The iOS Simulator build ${buildNumber} has been uploaded to BrowserStack.`;
          const prNumber = context.payload.pull_request.number;
          const repo = context.repo;
          github.rest.issues.createComment({
            ...repo,
            issue_number: prNumber,
            body: message,
          });