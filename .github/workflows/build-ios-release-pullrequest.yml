name: Build Release and Upload to TestFlight (iOS)

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, reopened, synchronize, labeled]
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ (contains(github.event.pull_request.title, '[self-hosted]') || contains(github.event.pull_request.labels.*.name, 'self-hosted')) && 'self-hosted' || 'macos-latest' }}
    timeout-minutes: 180
    outputs:
      new_build_number: ${{ steps.generate_build_number.outputs.build_number }}
      project_version: ${{ steps.determine_marketing_version.outputs.project_version }}
      ipa_output_path: ${{ steps.build_app.outputs.ipa_output_path }}
      latest_commit_message: ${{ steps.get_latest_commit_details.outputs.commit_message }}
      branch_name: ${{ steps.get_latest_commit_details.outputs.branch_name }}
    env:
      APPLE_ID: ${{ secrets.APPLE_ID }}
      MATCH_READONLY: "true"

    steps:
      - name: Checkout Project
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Ensures the full Git history is available

      - name: Get Commit Details
        id: get_latest_commit_details
        run: |
          echo "branch_name=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          echo "commit_message=${{ github.event.head_commit.message || github.event.pull_request.title }}" >> $GITHUB_OUTPUT

      - name: Specify Node.js Version
        if: ${{ !((contains(github.event.pull_request.title, '[self-hosted]') || contains(github.event.pull_request.labels.*.name, 'self-hosted'))) }}
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: 'npm'
          cache-dependency-path: package-lock.json

      - name: Setup Node.js for Self-Hosted Runner
        if: ${{ (contains(github.event.pull_request.title, '[self-hosted]') || contains(github.event.pull_request.labels.*.name, 'self-hosted')) }}
        run: |
          echo "Using system Node.js on self-hosted runner"
          node --version
          npm --version
          which node
          which npm

      - name: Setup Xcode (GitHub Hosted)
        if: ${{ !((contains(github.event.pull_request.title, '[self-hosted]') || contains(github.event.pull_request.labels.*.name, 'self-hosted'))) }}
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest

      - name: Setup Xcode Path
        run: |
          echo "Setting up Xcode..."
          if command -v sudo >/dev/null 2>&1; then
            sudo xcode-select -s /Applications/Xcode.app || echo "Could not set Xcode path with sudo, continuing..."
          else
            echo "No sudo access, using current Xcode configuration"
          fi
          echo "Xcode Version: $(xcodebuild -version)"
          echo "SDK Information:"
          xcodebuild -showsdks | grep -E "(iOS|watchOS|macOS)" | head -5

      - name: Set Up Ruby
        if: ${{ !((contains(github.event.pull_request.title, '[self-hosted]') || contains(github.event.pull_request.labels.*.name, 'self-hosted'))) }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.6

      - name: Setup Ruby for Self-Hosted Runner
        if: ${{ (contains(github.event.pull_request.title, '[self-hosted]') || contains(github.event.pull_request.labels.*.name, 'self-hosted')) }}
        run: |
          echo "Using system Ruby on self-hosted runner"
          ruby --version
          gem --version
          which ruby
          which gem

      - name: Install Dependencies with Bundler
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3 --quiet

      - name: Install Node Modules
        run: npm ci --omit=dev --yes

      - name: Install CocoaPods Dependencies
        run: |
          bundle exec fastlane ios install_pods
          echo "CocoaPods dependencies installed successfully"

      - name: Generate Build Number Based on Timestamp
        id: generate_build_number
        run: |
          NEW_BUILD_NUMBER=$(date +%s)
          echo "NEW_BUILD_NUMBER=$NEW_BUILD_NUMBER" >> $GITHUB_ENV
          echo "build_number=$NEW_BUILD_NUMBER" >> $GITHUB_OUTPUT

      - name: Set Build Number
        run: bundle exec fastlane ios increment_build_number_lane

      - name: Determine Marketing Version
        id: determine_marketing_version
        run: |
          MARKETING_VERSION=$(grep MARKETING_VERSION BlueWallet.xcodeproj/project.pbxproj | awk -F '= ' '{print $2}' | tr -d ' ;' | head -1)
          echo "PROJECT_VERSION=$MARKETING_VERSION" >> $GITHUB_ENV
          echo "project_version=$MARKETING_VERSION" >> $GITHUB_OUTPUT
        working-directory: ios

      - name: Create Temporary Keychain
        run: bundle exec fastlane ios create_temp_keychain
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Setup Provisioning Profiles
        env:
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          GIT_ACCESS_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
          GIT_URL: ${{ secrets.GIT_URL }}
          ITC_TEAM_ID: ${{ secrets.ITC_TEAM_ID }}
          ITC_TEAM_NAME: ${{ secrets.ITC_TEAM_NAME }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          bundle exec fastlane ios setup_provisioning_profiles

      - name: Build App
        id: build_app
        run: |
          echo "Starting iOS build..."
          echo "PROJECT_VERSION: ${PROJECT_VERSION:-'Not set'}"
          echo "NEW_BUILD_NUMBER: ${NEW_BUILD_NUMBER:-'Not set'}"
          
          bundle exec fastlane ios build_app_lane
          
          # Set IPA path for subsequent steps
          if [ -f "./ios/build/ipa_path.txt" ]; then
            IPA_PATH=$(cat ./ios/build/ipa_path.txt)
            echo "IPA_OUTPUT_PATH=$IPA_PATH" >> $GITHUB_ENV
            echo "ipa_output_path=$IPA_PATH" >> $GITHUB_OUTPUT
          else
            IPA_PATH=$(find ./ios -name "*.ipa" | head -n 1)
            if [ -n "$IPA_PATH" ]; then
              echo "IPA_OUTPUT_PATH=$IPA_PATH" >> $GITHUB_ENV
              echo "ipa_output_path=$IPA_PATH" >> $GITHUB_OUTPUT
            else
              echo "❌ No IPA file found"
              exit 1
            fi
          fi
          
          echo "✅ Build completed. IPA: ${IPA_PATH}"

      - name: Debug Build Failure
        if: failure()
        run: |
          echo "❌ Build failed - gathering debug information..."
          
          echo "Build directory contents:"
          if [ -d "ios/build" ]; then
            find ios/build -type f -name "*.log" -o -name "*.ipa" -o -name "*.xcarchive" | head -5
          else
            echo "  ios/build directory not found"
          fi
          
          echo "Recent build logs:"
          if [ -d "ios/build_logs" ]; then
            find ios/build_logs -name "*.log" -type f | head -2 | while read -r logfile; do
              echo "=== Last 20 lines of $logfile ==="
              tail -20 "$logfile" 2>/dev/null
            done
          else
            echo "  No build logs directory found"
          fi
          
          echo "Disk space: $(df -h / | tail -1 | awk '{print $4 " available"}')"

      - name: Upload Bugsnag Sourcemaps
        if: success()
        run: bundle exec fastlane ios upload_bugsnag_sourcemaps
        env:
          BUGSNAG_API_KEY: ${{ secrets.BUGSNAG_API_KEY }}
          BUGSNAG_RELEASE_STAGE: production
          PROJECT_VERSION: ${{ env.PROJECT_VERSION }}
          NEW_BUILD_NUMBER: ${{ env.NEW_BUILD_NUMBER }}

      - name: Upload Build Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build_logs
          path: ./ios/build_logs/
          retention-days: 7

      - name: Verify IPA File Before Upload
        run: |
          echo "Checking IPA file at: ${{ steps.build_app.outputs.ipa_output_path }}"
          if [ -f "${{ steps.build_app.outputs.ipa_output_path }}" ]; then
            echo "✅ IPA file exists"
            ls -la "${{ steps.build_app.outputs.ipa_output_path }}"
          else
            echo "❌ IPA file not found"
            find ./ios -name "*.ipa"
            exit 1
          fi
          
      - name: Upload IPA as Artifact
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: BlueWallet_IPA
          path: ${{ steps.build_app.outputs.ipa_output_path }}
          retention-days: 7

      - name: Delete Temporary Keychain
        if: always()
        run: bundle exec fastlane ios delete_temp_keychain

  testflight-upload:
    needs: build
    runs-on: ${{ (contains(github.event.pull_request.title, '[self-hosted]') || contains(github.event.pull_request.labels.*.name, 'self-hosted')) && 'self-hosted' || 'macos-latest' }}
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'testflight')
    env:
      APPLE_ID: ${{ secrets.APPLE_ID }}
      NEW_BUILD_NUMBER: ${{ needs.build.outputs.new_build_number }}
      PROJECT_VERSION: ${{ needs.build.outputs.project_version }}
      LATEST_COMMIT_MESSAGE: ${{ needs.build.outputs.latest_commit_message }}
      BRANCH_NAME: ${{ needs.build.outputs.branch_name }}
    steps:
      - name: Checkout Project
        uses: actions/checkout@v4

      - name: Set Up Ruby
        if: ${{ !((contains(github.event.pull_request.title, '[self-hosted]') || contains(github.event.pull_request.labels.*.name, 'self-hosted'))) }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.1.6

      - name: Setup Ruby for Self-Hosted Runner
        if: ${{ (contains(github.event.pull_request.title, '[self-hosted]') || contains(github.event.pull_request.labels.*.name, 'self-hosted')) }}
        run: |
          echo "Using system Ruby on self-hosted runner"
          ruby --version
          gem --version
          which ruby
          which gem
          
      - name: Install Dependencies with Bundler
        run: |
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3 --quiet

      - name: Download IPA from Artifact
        uses: actions/download-artifact@v4
        with:
          name: BlueWallet_IPA
          path: ./

      - name: Create App Store Connect API Key JSON
        run: echo '${{ secrets.APP_STORE_CONNECT_API_KEY_CONTENT }}' > ./appstore_api_key.json

      - name: Set IPA Path Environment Variable
        run: echo "IPA_OUTPUT_PATH=$(pwd)/BlueWallet_${{ needs.build.outputs.project_version }}_${{ needs.build.outputs.new_build_number }}.ipa" >> $GITHUB_ENV

      - name: Verify IPA Path Before Upload
        run: |
          if [ ! -f "$IPA_OUTPUT_PATH" ]; then
            echo "❌ IPA file not found at path: $IPA_OUTPUT_PATH"
            ls -la $(pwd)
            exit 1
          else
            echo "✅ Found IPA at: $IPA_OUTPUT_PATH"
          fi

      - name: Upload to TestFlight
        run: bundle exec fastlane ios upload_to_testflight_lane
        env:
          APPLE_API_KEY_PATH: ./appstore_api_key.json
          MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
          GIT_ACCESS_TOKEN: ${{ secrets.GIT_ACCESS_TOKEN }}
          GIT_URL: ${{ secrets.GIT_URL }}
          ITC_TEAM_ID: ${{ secrets.ITC_TEAM_ID }}
          ITC_TEAM_NAME: ${{ secrets.ITC_TEAM_NAME }}
          APPLE_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_KEY_ID }}
          APPLE_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ISSUER_ID }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Post PR Comment
        if: success() && github.event_name == 'pull_request'
        uses: actions/github-script@v6
        env:
          BUILD_NUMBER: ${{ needs.build.outputs.new_build_number }}
          PROJECT_VERSION: ${{ needs.build.outputs.project_version }}
          LATEST_COMMIT_MESSAGE: ${{ needs.build.outputs.latest_commit_message }}
        with:
          script: |
            const buildNumber = process.env.BUILD_NUMBER;
            const version = process.env.PROJECT_VERSION;
            const message = `✅ Build ${version} (${buildNumber}) has been uploaded to TestFlight and will be available for testing soon.`;
            const prNumber = context.payload.pull_request.number;
            const repo = context.repo;
            github.rest.issues.createComment({
              ...repo,
              issue_number: prNumber,
              body: message,
            });