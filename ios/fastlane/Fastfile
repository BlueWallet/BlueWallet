def app_identifiers
  ["io.bluewallet.bluewallet", "io.bluewallet.bluewallet.watch", "io.bluewallet.bluewallet.watch.extension", "io.bluewallet.bluewallet.MarketWidget"]
end

platform :ios do

  before_all do |lane, options|
    UI.message("Setting up for all lanes...")
    # Discard untracked changes only in the project directory
    sh("git clean -fd -- ios/ BlueWallet.xcworkspace/")
    sh("git checkout -- ios/ BlueWallet.xcworkspace/")
  end

  desc "Create a temporary keychain"
  lane :create_temp_keychain do
    UI.message("Creating a temporary keychain...")

    create_keychain(
      name: "temp_keychain",
      password: ENV["KEYCHAIN_PASSWORD"],
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: true
    )

    UI.message("Temporary keychain created successfully.")
  end

  desc "Setup Provisioning Profiles and Certificates"
  lane :setup_profiles do
    UI.message("Setting up provisioning profiles and certificates from the repo...")

    # Download the provisioning profiles and certificates from the repo
    sh("curl -o ~/certs.tar.gz #{ENV['GIT_URL']}/certs.tar.gz")
    sh("curl -o ~/profiles.tar.gz #{ENV['GIT_URL']}/profiles.tar.gz")

    # Extract the certificates
    sh("tar -xvzf ~/certs.tar.gz -C ~/Library/Keychains/")
    # Extract the provisioning profiles
    sh("tar -xvzf ~/profiles.tar.gz -C ~/Library/MobileDevice/Provisioning\\ Profiles/")
  end

  desc "Clear derived data"
  lane :clear_derived_data_lane do
    UI.message("Clearing derived data...")
    clear_derived_data
  end

  desc "Increment build number"
  lane :increment_build_number_lane do
    UI.message("Incrementing build number to current timestamp...")

    increment_build_number(
      xcodeproj: "BlueWallet.xcodeproj",
      build_number: ENV["NEW_BUILD_NUMBER"]
    )

    UI.message("Build number set to: #{ENV['NEW_BUILD_NUMBER']}")
  end

  desc "Install CocoaPods dependencies"
  lane :install_pods do
    UI.message("Installing CocoaPods dependencies...")
    cocoapods
  end

  desc "Build the BlueWallet iOS app"
  lane :build_bluewallet_ios_app do
    build_app(
      scheme: "BlueWallet",
      workspace: "BlueWallet.xcworkspace",
      export_method: "app-store",
      include_bitcode: false,
      configuration: "Release",
      skip_profile_detection: false,
      include_symbols: true,
      export_options: {
        signingStyle: "manual",
        provisioningProfiles: {
          'io.bluewallet.bluewallet' => 'AppStore_io.bluewallet.bluewallet.mobileprovision',
          'io.bluewallet.bluewallet.watch' => 'AppStore_io.bluewallet.bluewallet.watch.mobileprovision',
          'io.bluewallet.bluewallet.watch.extension' => 'AppStore_io.bluewallet.bluewallet.watch.extension.mobileprovision',
          'io.bluewallet.bluewallet.MarketWidget' => 'AppStore_io.bluewallet.bluewallet.MarketWidget.mobileprovision',
          'io.bluewallet.bluewallet.watch.Stickers' => 'match AppStore io.bluewallet.bluewallet.Stickers',
        }
      },
      xcargs: "GCC_PREPROCESSOR_DEFINITIONS='$(inherited) VERBOSE_LOGGING=1'",
      output_directory: "./build",
      output_name: "BlueWallet.#{ENV['PROJECT_VERSION']}(#{ENV['NEW_BUILD_NUMBER']}).ipa",
      buildlog_path: "./build_logs"
    )
  end

  desc "Build the Mac Catalyst app"
  lane :build_catalyst_app do
    build_app(
      scheme: "BlueWallet",
      workspace: "BlueWallet.xcworkspace",
      configuration: "Release",
      sdk: "macosx",
      export_method: "app-store",
      include_bitcode: false,
      export_options: {
        signingStyle: "manual",
        provisioningProfiles: {
          'io.bluewallet.bluewallet' => 'AppStore_io.bluewallet.bluewallet_catalyst.provisionprofile',
          'io.bluewallet.bluewallet.watch' => 'AppStore_io.bluewallet.bluewallet.watch_catalyst.provisionprofile',
          'io.bluewallet.bluewallet.watch.extension' => 'AppStore_io.bluewallet.bluewallet.watch.extension_catalyst.provisionprofile',
          'io.bluewallet.bluewallet.MarketWidget' => 'AppStore_io.bluewallet.bluewallet.MarketWidget_catalyst.provisionprofile',
        }
      },
      output_directory: "./build-catalyst",
      output_name: "BlueWallet.#{ENV['PROJECT_VERSION']}(#{ENV['NEW_BUILD_NUMBER']}).app",
      buildlog_path: "./build_logs"
    )
  end

  desc "Upload to TestFlight"
  lane :upload_ios_to_testflight do
    UI.message("Uploading iOS App to TestFlight...")
    upload_to_testflight(
      ipa: "./build/BlueWallet.#{ENV['PROJECT_VERSION']}(#{ENV['NEW_BUILD_NUMBER']}).ipa",
      skip_waiting_for_build_processing: true,
      changelog: ENV["LATEST_COMMIT_MESSAGE"]
    )
  end

  desc "Upload Mac Catalyst app to TestFlight"
  lane :upload_catalyst_to_testflight do
    UI.message("Uploading Mac Catalyst app to TestFlight...")
    upload_to_testflight(
      ipa: "./build-catalyst/BlueWallet.#{ENV['PROJECT_VERSION']}(#{ENV['NEW_BUILD_NUMBER']}).app",
      skip_waiting_for_build_processing: true,
      changelog: ENV["LATEST_COMMIT_MESSAGE"]
    )
  end
end
