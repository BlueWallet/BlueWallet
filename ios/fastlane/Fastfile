def app_identifiers
  ["io.bluewallet.bluewallet", "io.bluewallet.bluewallet.watch", "io.bluewallet.bluewallet.watch.extension", "io.bluewallet.bluewallet.Stickers", "io.bluewallet.bluewallet.MarketWidget"]
end

platform :ios do

  before_all do |lane, options|
    UI.message("Setting up for all lanes...")
    UI.message("Discarding all untracked changes before running any lane...")
    sh("git clean -fd")
    sh("git checkout -- .")
  end

  desc "Register new devices from a file"
  lane :register_devices_from_txt do
    UI.message("Registering new devices from file...")

    csv_path = "../../devices.txt"

    register_devices(
      devices_file: csv_path
    )

    UI.message("Devices registered successfully.")

    app_identifiers.each do |app_identifier|
      match(
        type: "development", 
        app_identifier: app_identifier,
        readonly: true, 
      )
    end

    UI.message("Development provisioning profiles updated.")
  end  

  desc "Create a temporary keychain"
  lane :create_temp_keychain do
    UI.message("Creating a temporary keychain...")
  
    create_keychain(
      name: "temp_keychain",
      password: ENV["KEYCHAIN_PASSWORD"],
      default_keychain: true,
      unlock: true,
      timeout: 3600,
      lock_when_sleeps: true
    )
  
    UI.message("Temporary keychain created successfully.")
  end

  desc "Synchronize certificates and provisioning profiles for iOS or Catalyst"
  lane :setup_profiles do |options|
    platform = options[:platform] || "ios"
    type = options[:type] || "appstore"

    # Remove local master branch if it exists (Exit status: 128 - 'fatal: a branch named 'master' already exists')
    sh("git branch -D master || true")
    
    app_identifiers.each do |app_identifier|
      match(
        type: type,
        platform: platform,
        app_identifier: app_identifier,
        git_url: ENV["GIT_URL"],
        git_basic_authorization: ENV["GIT_ACCESS_TOKEN"],
        keychain_name: "temp_keychain",
        keychain_password: ENV["KEYCHAIN_PASSWORD"],
        team_id: ENV["ITC_TEAM_ID"],
        team_name: ENV["ITC_TEAM_NAME"],
        readonly: true,
      )
    end
  end

  desc "Clear derived data"
  lane :clear_derived_data_lane do
    UI.message("Clearing derived data...")
    clear_derived_data
  end

  desc "Increment build number"
  lane :increment_build_number_lane do
    UI.message("Incrementing build number to current timestamp...")
    
    increment_build_number(
      xcodeproj: "BlueWallet.xcodeproj", 
      build_number: ENV["NEW_BUILD_NUMBER"]
    )
  
    UI.message("Build number set to: #{ENV['NEW_BUILD_NUMBER']}")
  end

  desc "Install CocoaPods dependencies"
  lane :install_pods do
    UI.message("Installing CocoaPods dependencies...")
    cocoapods
  end

  desc "Build the iOS app"
  lane :build_ios_app do
    build_app(
      scheme: "BlueWallet",
      workspace: "BlueWallet.xcworkspace",
      export_method: "app-store",
      include_bitcode: false,
      configuration: "Release",
      skip_profile_detection: true,
      include_symbols: true,
      export_team_id: ENV["ITC_TEAM_ID"],
      export_options: {
        signingStyle: "manual",
        provisioningProfiles: {
          'io.bluewallet.bluewallet' => 'match AppStore io.bluewallet.bluewallet',
          'io.bluewallet.bluewallet.watch' => 'match AppStore io.bluewallet.bluewallet.watch',
          'io.bluewallet.bluewallet.watch.extension' => 'match AppStore io.bluewallet.bluewallet.watch.extension',
          'io.bluewallet.bluewallet.Stickers' => 'match AppStore io.bluewallet.bluewallet.Stickers',
          'io.bluewallet.bluewallet.MarketWidget' => 'match AppStore io.bluewallet.bluewallet.MarketWidget'
        }
      },
      xcargs: "GCC_PREPROCESSOR_DEFINITIONS='$(inherited) VERBOSE_LOGGING=1'",
      output_directory: "./build",
      output_name: "BlueWallet.#{ENV['PROJECT_VERSION']}(#{ENV['NEW_BUILD_NUMBER']}).ipa",
      buildlog_path: "./build_logs"
    )
  end

  desc "Build the Mac Catalyst app"
  lane :build_catalyst_app do
    build_app(
      scheme: "BlueWallet",
      workspace: "BlueWallet.xcworkspace",
      configuration: "Release",
      sdk: "macosx",
      export_method: "app-store",
      include_bitcode: false,
      export_options: {
        signingStyle: "manual",
        provisioningProfiles: {
          'io.bluewallet.bluewallet' => 'match AppStore io.bluewallet.bluewallet',
          'io.bluewallet.bluewallet.watch' => 'match AppStore io.bluewallet.bluewallet.watch',
          'io.bluewallet.bluewallet.watch.extension' => 'match AppStore io.bluewallet.bluewallet.watch.extension',
          'io.bluewallet.bluewallet.Stickers' => 'match AppStore io.bluewallet.bluewallet.Stickers',
          'io.bluewallet.bluewallet.MarketWidget' => 'match AppStore io.bluewallet.bluewallet.MarketWidget'
        }
      },
      output_directory: "./build-catalyst",
      output_name: "BlueWallet.#{ENV['PROJECT_VERSION']}(#{ENV['NEW_BUILD_NUMBER']}).app",
      buildlog_path: "./build_logs"
    )
  end

  desc "Upload iOS App to TestFlight"
  lane :upload_ios_to_testflight do
    attempts = 0
    max_attempts = 3
    begin
      UI.message("Uploading iOS App to TestFlight...")
      changelog = ENV["LATEST_COMMIT_MESSAGE"]
  
      upload_to_testflight(
        ipa: "./build/BlueWallet.#{ENV['PROJECT_VERSION']}(#{ENV['NEW_BUILD_NUMBER']}).ipa",
        skip_waiting_for_build_processing: true,
        changelog: changelog
      )
    rescue => exception
      attempts += 1
      if attempts <= max_attempts
        wait_time = 180 
        UI.message("Attempt ##{attempts} failed with error: #{exception.message}. Waiting #{wait_time} seconds before trying again...")
        sleep(wait_time)
        retry
      else
        UI.error("Failed after #{max_attempts} attempts. Error: #{exception.message}")
        raise exception
      end
    end
  end

  desc "Upload Mac Catalyst App to TestFlight"
  lane :upload_catalyst_to_testflight do
    attempts = 0
    max_attempts = 3
    begin
      UI.message("Uploading Mac Catalyst App to TestFlight...")
      changelog = ENV["LATEST_COMMIT_MESSAGE"]
  
      upload_to_testflight(
        ipa: "./build-catalyst/BlueWallet.#{ENV['PROJECT_VERSION']}(#{ENV['NEW_BUILD_NUMBER']}).app",
        skip_waiting_for_build_processing: true,
        changelog: changelog
      )
    rescue => exception
      attempts += 1
      if attempts <= max_attempts
        wait_time = 180 
        UI.message("Attempt ##{attempts} failed with error: #{exception.message}. Waiting #{wait_time} seconds before trying again...")
        sleep(wait_time)
        retry
      else
        UI.error("Failed after #{max_attempts} attempts. Error: #{exception.message}")
        raise exception
      end
    end
  end

end
